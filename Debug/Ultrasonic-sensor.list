
Ultrasonic-sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003760  08003760  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003760  08003760  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003760  08003760  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  080037c4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080037c4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3e3  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e0  00000000  00000000  0002b4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000907  00000000  00000000  0002da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178b8  00000000  00000000  0002e317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb81  00000000  00000000  00045bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a2c8  00000000  00000000  00052750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003680  00000000  00000000  000dca18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e0098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080036d4 	.word	0x080036d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080036d4 	.word	0x080036d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t time)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <delay+0x2c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 800094e:	bf00      	nop
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <delay+0x2c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	429a      	cmp	r2, r3
 800095a:	d3f9      	bcc.n	8000950 <delay+0x14>
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20000078 	.word	0x20000078
 800096c:	00000000 	.word	0x00000000

08000970 <HAL_TIM_IC_CaptureCallback>:

//Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7f1b      	ldrb	r3, [r3, #28]
 800097c:	2b08      	cmp	r3, #8
 800097e:	f040 8083 	bne.w	8000a88 <HAL_TIM_IC_CaptureCallback+0x118>
		//if the interrupt source is channel 1
	{
		if(Is_First_Captured == 0) //if the first value is not captured
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d11a      	bne.n	80009c0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800098a:	210c      	movs	r1, #12
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f001 fd9f 	bl	80024d0 <HAL_TIM_ReadCapturedValue>
 8000992:	4603      	mov	r3, r0
 8000994:	4a41      	ldr	r2, [pc, #260]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000996:	6013      	str	r3, [r2, #0]
			//read the first value
			Is_First_Captured = 1; //set the first captured as true
 8000998:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <HAL_TIM_IC_CaptureCallback+0x128>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
			//Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6a1a      	ldr	r2, [r3, #32]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009ac:	621a      	str	r2, [r3, #32]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	6a1a      	ldr	r2, [r3, #32]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009bc:	621a      	str	r2, [r3, #32]
			//set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 80009be:	e063      	b.n	8000a88 <HAL_TIM_IC_CaptureCallback+0x118>
		else if(Is_First_Captured == 1)// if the first is already captured
 80009c0:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <HAL_TIM_IC_CaptureCallback+0x128>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d15f      	bne.n	8000a88 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80009c8:	210c      	movs	r1, #12
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f001 fd80 	bl	80024d0 <HAL_TIM_ReadCapturedValue>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4a33      	ldr	r2, [pc, #204]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009d4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0); //reset the counter
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_Val2 > IC_Val1)
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d907      	bls.n	80009fa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	e00f      	b.n	8000a1a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d909      	bls.n	8000a1a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000a14:	33ff      	adds	r3, #255	; 0xff
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a18:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034/2;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fce0 	bl	80003e4 <__aeabi_ui2d>
 8000a24:	a31a      	add	r3, pc, #104	; (adr r3, 8000a90 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2a:	f7ff fd55 	bl	80004d8 <__aeabi_dmul>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	460b      	mov	r3, r1
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a3e:	f7ff fe75 	bl	800072c <__aeabi_ddiv>
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f7ff ff57 	bl	80008fc <__aeabi_d2uiz>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a54:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; //set it back to false
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6a1a      	ldr	r2, [r3, #32]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a6a:	621a      	str	r2, [r3, #32]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6a12      	ldr	r2, [r2, #32]
 8000a76:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0202 	bic.w	r2, r2, #2
 8000a86:	60da      	str	r2, [r3, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	b020c49c 	.word	0xb020c49c
 8000a94:	3fa16872 	.word	0x3fa16872
 8000a98:	20000114 	.word	0x20000114
 8000a9c:	20000108 	.word	0x20000108
 8000aa0:	2000010c 	.word	0x2000010c
 8000aa4:	20000110 	.word	0x20000110
 8000aa8:	20000115 	.word	0x20000115
 8000aac:	20000078 	.word	0x20000078

08000ab0 <HCSR04_Read>:

void HCSR04_Read(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <HCSR04_Read+0x34>)
 8000aba:	f000 fde1 	bl	8001680 <HAL_GPIO_WritePin>
	//pull the TRIG pin HIGH
	delay(10); //wait for 10us
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f7ff ff3c 	bl	800093c <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HCSR04_Read+0x34>)
 8000aca:	f000 fdd9 	bl	8001680 <HAL_GPIO_WritePin>
	//pull the TRIG pin Low
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HCSR04_Read+0x38>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HCSR04_Read+0x38>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 0202 	orr.w	r2, r2, #2
 8000adc:	60da      	str	r2, [r3, #12]
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	20000078 	.word	0x20000078

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 faad 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f82d 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 f8f1 	bl	8000ce0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000afe:	f000 f86f 	bl	8000be0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b02:	f000 f8c3 	bl	8000c8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000b06:	210c      	movs	r1, #12
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <main+0x58>)
 8000b0a:	f001 fa31 	bl	8001f70 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HCSR04_Read();
 8000b0e:	f7ff ffcf 	bl	8000ab0 <HCSR04_Read>
	  HAL_Delay(2000);
 8000b12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b16:	f000 fafd 	bl	8001114 <HAL_Delay>

    /* USER CODE BEGIN 3 */
	  char buffer[50];
	         snprintf(buffer, sizeof(buffer), "Distance: %d cm\r\n", Distance);
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <main+0x5c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	1d38      	adds	r0, r7, #4
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <main+0x60>)
 8000b22:	2132      	movs	r1, #50	; 0x32
 8000b24:	f002 f910 	bl	8002d48 <sniprintf>
	         HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb10 	bl	8000150 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	1d39      	adds	r1, r7, #4
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <main+0x64>)
 8000b3c:	f001 ff84 	bl	8002a48 <HAL_UART_Transmit>
  {
 8000b40:	e7e5      	b.n	8000b0e <main+0x22>
 8000b42:	bf00      	nop
 8000b44:	20000078 	.word	0x20000078
 8000b48:	20000115 	.word	0x20000115
 8000b4c:	080036ec 	.word	0x080036ec
 8000b50:	200000c0 	.word	0x200000c0

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b090      	sub	sp, #64	; 0x40
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0318 	add.w	r3, r7, #24
 8000b5e:	2228      	movs	r2, #40	; 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 f924 	bl	8002db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fd87 	bl	80016b0 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f8e4 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	230f      	movs	r3, #15
 8000bae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fff4 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bd2:	f000 f8cf 	bl	8000d74 <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3740      	adds	r7, #64	; 0x40
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <MX_TIM1_Init+0xa8>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c04:	2248      	movs	r2, #72	; 0x48
 8000c06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c2a:	f001 f951 	bl	8001ed0 <HAL_TIM_IC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f89e 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	480f      	ldr	r0, [pc, #60]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c48:	f001 fe3e 	bl	80028c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c52:	f000 f88f 	bl	8000d74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	220c      	movs	r2, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_TIM1_Init+0xa4>)
 8000c6e:	f001 fb93 	bl	8002398 <HAL_TIM_IC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c78:	f000 f87c 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000078 	.word	0x20000078
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_USART1_UART_Init+0x50>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	f001 fe70 	bl	80029a8 <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cce:	f000 f851 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000c0 	.word	0x200000c0
 8000cdc:	40013800 	.word	0x40013800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0320 	and.w	r3, r3, #32
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_GPIO_Init+0x8c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2102      	movs	r1, #2
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <MX_GPIO_Init+0x90>)
 8000d42:	f000 fc9d 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d46:	2302      	movs	r3, #2
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_GPIO_Init+0x90>)
 8000d5e:	f000 fb0b 	bl	8001378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_MspInit+0x5c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_MspInit+0x5c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_MspInit+0x5c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_MspInit+0x60>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_MspInit+0x60>)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000

08000de4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <HAL_TIM_IC_MspInit+0x84>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d12c      	bne.n	8000e5e <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_TIM_IC_MspInit+0x88>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <HAL_TIM_IC_MspInit+0x88>)
 8000e0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_TIM_IC_MspInit+0x88>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_TIM_IC_MspInit+0x88>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <HAL_TIM_IC_MspInit+0x88>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_TIM_IC_MspInit+0x88>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_TIM_IC_MspInit+0x8c>)
 8000e4a:	f000 fa95 	bl	8001378 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201b      	movs	r0, #27
 8000e54:	f000 fa59 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e58:	201b      	movs	r0, #27
 8000e5a:	f000 fa72 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012c00 	.word	0x40012c00
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <HAL_UART_MspInit+0xa4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d13d      	bne.n	8000f10 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_UART_MspInit+0xa8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <HAL_UART_MspInit+0xa8>)
 8000e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_UART_MspInit+0xa8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_UART_MspInit+0xa8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_UART_MspInit+0xa8>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0xa8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec4:	2340      	movs	r3, #64	; 0x40
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4812      	ldr	r0, [pc, #72]	; (8000f20 <HAL_UART_MspInit+0xac>)
 8000ed8:	f000 fa4e 	bl	8001378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <HAL_UART_MspInit+0xac>)
 8000ef0:	f000 fa42 	bl	8001378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_UART_MspInit+0xb0>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_UART_MspInit+0xb0>)
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010c00 	.word	0x40010c00
 8000f24:	40010000 	.word	0x40010000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6e:	f000 f8b5 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM1_CC_IRQHandler+0x10>)
 8000f7e:	f001 f903 	bl	8002188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000078 	.word	0x20000078

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f001 ff00 	bl	8002dc0 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20005000 	.word	0x20005000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	20000118 	.word	0x20000118
 8000ff4:	20000268 	.word	0x20000268

08000ff8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff fff8 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100a:	490c      	ldr	r1, [pc, #48]	; (800103c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001020:	4c09      	ldr	r4, [pc, #36]	; (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f001 fecd 	bl	8002dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001032:	f7ff fd5b 	bl	8000aec <main>
  bx lr
 8001036:	4770      	bx	lr
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001040:	08003768 	.word	0x08003768
  ldr r2, =_sbss
 8001044:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001048:	20000268 	.word	0x20000268

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x28>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x28>)
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f947 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	200f      	movs	r0, #15
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fe88 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f95f 	bl	800135e <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f927 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x20>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <HAL_IncTick+0x20>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	20000008 	.word	0x20000008
 80010fc:	2000011c 	.word	0x2000011c

08001100 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b02      	ldr	r3, [pc, #8]	; (8001110 <HAL_GetTick+0x10>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	2000011c 	.word	0x2000011c

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff fff0 	bl	8001100 <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffe0 	bl	8001100 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4906      	ldr	r1, [pc, #24]	; (80011f4 <__NVIC_EnableIRQ+0x34>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff90 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff2d 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff42 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff35 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b480      	push	{r7}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138a:	e169      	b.n	8001660 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800138c:	2201      	movs	r2, #1
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 8158 	bne.w	800165a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a9a      	ldr	r2, [pc, #616]	; (8001618 <HAL_GPIO_Init+0x2a0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d05e      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013b4:	4a98      	ldr	r2, [pc, #608]	; (8001618 <HAL_GPIO_Init+0x2a0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d875      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013ba:	4a98      	ldr	r2, [pc, #608]	; (800161c <HAL_GPIO_Init+0x2a4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d058      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013c0:	4a96      	ldr	r2, [pc, #600]	; (800161c <HAL_GPIO_Init+0x2a4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d86f      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013c6:	4a96      	ldr	r2, [pc, #600]	; (8001620 <HAL_GPIO_Init+0x2a8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d052      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013cc:	4a94      	ldr	r2, [pc, #592]	; (8001620 <HAL_GPIO_Init+0x2a8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d869      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013d2:	4a94      	ldr	r2, [pc, #592]	; (8001624 <HAL_GPIO_Init+0x2ac>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d04c      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013d8:	4a92      	ldr	r2, [pc, #584]	; (8001624 <HAL_GPIO_Init+0x2ac>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d863      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013de:	4a92      	ldr	r2, [pc, #584]	; (8001628 <HAL_GPIO_Init+0x2b0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d046      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013e4:	4a90      	ldr	r2, [pc, #576]	; (8001628 <HAL_GPIO_Init+0x2b0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d85d      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013ea:	2b12      	cmp	r3, #18
 80013ec:	d82a      	bhi.n	8001444 <HAL_GPIO_Init+0xcc>
 80013ee:	2b12      	cmp	r3, #18
 80013f0:	d859      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013f2:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <HAL_GPIO_Init+0x80>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	08001473 	.word	0x08001473
 80013fc:	0800144d 	.word	0x0800144d
 8001400:	0800145f 	.word	0x0800145f
 8001404:	080014a1 	.word	0x080014a1
 8001408:	080014a7 	.word	0x080014a7
 800140c:	080014a7 	.word	0x080014a7
 8001410:	080014a7 	.word	0x080014a7
 8001414:	080014a7 	.word	0x080014a7
 8001418:	080014a7 	.word	0x080014a7
 800141c:	080014a7 	.word	0x080014a7
 8001420:	080014a7 	.word	0x080014a7
 8001424:	080014a7 	.word	0x080014a7
 8001428:	080014a7 	.word	0x080014a7
 800142c:	080014a7 	.word	0x080014a7
 8001430:	080014a7 	.word	0x080014a7
 8001434:	080014a7 	.word	0x080014a7
 8001438:	080014a7 	.word	0x080014a7
 800143c:	08001455 	.word	0x08001455
 8001440:	08001469 	.word	0x08001469
 8001444:	4a79      	ldr	r2, [pc, #484]	; (800162c <HAL_GPIO_Init+0x2b4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800144a:	e02c      	b.n	80014a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e029      	b.n	80014a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	3304      	adds	r3, #4
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e024      	b.n	80014a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	3308      	adds	r3, #8
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e01f      	b.n	80014a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	330c      	adds	r3, #12
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e01a      	b.n	80014a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800147a:	2304      	movs	r3, #4
 800147c:	623b      	str	r3, [r7, #32]
          break;
 800147e:	e013      	b.n	80014a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	611a      	str	r2, [r3, #16]
          break;
 8001492:	e009      	b.n	80014a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001494:	2308      	movs	r3, #8
 8001496:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	615a      	str	r2, [r3, #20]
          break;
 800149e:	e003      	b.n	80014a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
          break;
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x130>
          break;
 80014a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2bff      	cmp	r3, #255	; 0xff
 80014ac:	d801      	bhi.n	80014b2 <HAL_GPIO_Init+0x13a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	e001      	b.n	80014b6 <HAL_GPIO_Init+0x13e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3304      	adds	r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2bff      	cmp	r3, #255	; 0xff
 80014bc:	d802      	bhi.n	80014c4 <HAL_GPIO_Init+0x14c>
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x152>
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	3b08      	subs	r3, #8
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	210f      	movs	r1, #15
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	6a39      	ldr	r1, [r7, #32]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	431a      	orrs	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80b1 	beq.w	800165a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014f8:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001510:	4a48      	ldr	r2, [pc, #288]	; (8001634 <HAL_GPIO_Init+0x2bc>)
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_GPIO_Init+0x2c0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d013      	beq.n	8001564 <HAL_GPIO_Init+0x1ec>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a3f      	ldr	r2, [pc, #252]	; (800163c <HAL_GPIO_Init+0x2c4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00d      	beq.n	8001560 <HAL_GPIO_Init+0x1e8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <HAL_GPIO_Init+0x2c8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d007      	beq.n	800155c <HAL_GPIO_Init+0x1e4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a3d      	ldr	r2, [pc, #244]	; (8001644 <HAL_GPIO_Init+0x2cc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_GPIO_Init+0x1e0>
 8001554:	2303      	movs	r3, #3
 8001556:	e006      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 8001558:	2304      	movs	r3, #4
 800155a:	e004      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 800155c:	2302      	movs	r3, #2
 800155e:	e002      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 8001564:	2300      	movs	r3, #0
 8001566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001568:	f002 0203 	and.w	r2, r2, #3
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	4093      	lsls	r3, r2
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001576:	492f      	ldr	r1, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x2bc>)
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	492c      	ldr	r1, [pc, #176]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4928      	ldr	r1, [pc, #160]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	4922      	ldr	r1, [pc, #136]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60cb      	str	r3, [r1, #12]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	491e      	ldr	r1, [pc, #120]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4918      	ldr	r1, [pc, #96]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4914      	ldr	r1, [pc, #80]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d021      	beq.n	800164c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	490e      	ldr	r1, [pc, #56]	; (8001648 <HAL_GPIO_Init+0x2d0>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e021      	b.n	800165a <HAL_GPIO_Init+0x2e2>
 8001616:	bf00      	nop
 8001618:	10320000 	.word	0x10320000
 800161c:	10310000 	.word	0x10310000
 8001620:	10220000 	.word	0x10220000
 8001624:	10210000 	.word	0x10210000
 8001628:	10120000 	.word	0x10120000
 800162c:	10110000 	.word	0x10110000
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00
 8001640:	40011000 	.word	0x40011000
 8001644:	40011400 	.word	0x40011400
 8001648:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_GPIO_Init+0x304>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	43db      	mvns	r3, r3
 8001654:	4909      	ldr	r1, [pc, #36]	; (800167c <HAL_GPIO_Init+0x304>)
 8001656:	4013      	ands	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	3301      	adds	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	f47f ae8e 	bne.w	800138c <HAL_GPIO_Init+0x14>
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	372c      	adds	r7, #44	; 0x2c
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e272      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d00c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016dc:	4b8f      	ldr	r3, [pc, #572]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d112      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
 80016e8:	4b8c      	ldr	r3, [pc, #560]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d10b      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d06c      	beq.n	80017dc <HAL_RCC_OscConfig+0x12c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d168      	bne.n	80017dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e24c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x76>
 8001718:	4b80      	ldr	r3, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a7f      	ldr	r2, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e02e      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x98>
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7a      	ldr	r2, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a77      	ldr	r2, [pc, #476]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e01d      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0xbc>
 8001752:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a71      	ldr	r2, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 800176c:	4b6b      	ldr	r3, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6a      	ldr	r2, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a67      	ldr	r2, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fcb8 	bl	8001100 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fcb4 	bl	8001100 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e200      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0xe4>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fca4 	bl	8001100 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fca0 	bl	8001100 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1ec      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x10c>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ea:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d11c      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1c0      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4939      	ldr	r1, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	e03a      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fc59 	bl	8001100 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fc55 	bl	8001100 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1a1      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fc38 	bl	8001100 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fc34 	bl	8001100 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e180      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03a      	beq.n	8001934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fc18 	bl	8001100 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff fc14 	bl	8001100 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e160      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 face 	bl	8001e94 <RCC_Delay>
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fbfe 	bl	8001100 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001906:	e00f      	b.n	8001928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fbfa 	bl	8001100 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d908      	bls.n	8001928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e146      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	42420000 	.word	0x42420000
 8001924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e9      	bne.n	8001908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a6 	beq.w	8001a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a87      	ldr	r2, [pc, #540]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b85      	ldr	r3, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a7e      	ldr	r2, [pc, #504]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fbbb 	bl	8001100 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff fbb7 	bl	8001100 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e103      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x312>
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e02d      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x334>
 80019ca:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	e01c      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x356>
 80019ec:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a5a      	ldr	r2, [pc, #360]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb6b 	bl	8001100 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fb67 	bl	8001100 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0b1      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ee      	beq.n	8001a2e <HAL_RCC_OscConfig+0x37e>
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fb55 	bl	8001100 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fb51 	bl	8001100 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e09b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ee      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8087 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d061      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d146      	bne.n	8001b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb25 	bl	8001100 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb21 	bl	8001100 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e06d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4921      	ldr	r1, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a19      	ldr	r1, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	430b      	orrs	r3, r1
 8001b06:	491b      	ldr	r1, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff faf5 	bl	8001100 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff faf1 	bl	8001100 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e03d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46a>
 8001b38:	e035      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fade 	bl	8001100 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fada 	bl	8001100 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e026      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x498>
 8001b66:	e01e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e019      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_OscConfig+0x500>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0d0      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d910      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4965      	ldr	r1, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	494d      	ldr	r1, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d040      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e073      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e06b      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4936      	ldr	r1, [pc, #216]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff fa2c 	bl	8001100 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff fa28 	bl	8001100 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e053      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d210      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4922      	ldr	r1, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4916      	ldr	r1, [pc, #88]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d42:	f000 f821 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	490a      	ldr	r1, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d54:	5ccb      	ldrb	r3, [r1, r3]
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1cc>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f98a 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08003700 	.word	0x08003700
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d002      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x30>
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0x36>
 8001db6:	e027      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dba:	613b      	str	r3, [r7, #16]
      break;
 8001dbc:	e027      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	0c9b      	lsrs	r3, r3, #18
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	0c5b      	lsrs	r3, r3, #17
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	fb03 f202 	mul.w	r2, r3, r2
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e004      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	613b      	str	r3, [r7, #16]
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	613b      	str	r3, [r7, #16]
      break;
 8001e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0e:	693b      	ldr	r3, [r7, #16]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	08003718 	.word	0x08003718
 8001e28:	08003728 	.word	0x08003728
 8001e2c:	003d0900 	.word	0x003d0900

08001e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e48:	f7ff fff2 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08003710 	.word	0x08003710

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	0adb      	lsrs	r3, r3, #11
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08003710 	.word	0x08003710

08001e94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <RCC_Delay+0x34>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <RCC_Delay+0x38>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0a5b      	lsrs	r3, r3, #9
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb0:	bf00      	nop
  }
  while (Delay --);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	60fa      	str	r2, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f9      	bne.n	8001eb0 <RCC_Delay+0x1c>
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e041      	b.n	8001f66 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe ff74 	bl	8000de4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f000 fb46 	bl	80025a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d104      	bne.n	8001f8e <HAL_TIM_IC_Start_IT+0x1e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	e013      	b.n	8001fb6 <HAL_TIM_IC_Start_IT+0x46>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d104      	bne.n	8001f9e <HAL_TIM_IC_Start_IT+0x2e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	e00b      	b.n	8001fb6 <HAL_TIM_IC_Start_IT+0x46>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d104      	bne.n	8001fae <HAL_TIM_IC_Start_IT+0x3e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	e003      	b.n	8001fb6 <HAL_TIM_IC_Start_IT+0x46>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d104      	bne.n	8001fc8 <HAL_TIM_IC_Start_IT+0x58>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e013      	b.n	8001ff0 <HAL_TIM_IC_Start_IT+0x80>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d104      	bne.n	8001fd8 <HAL_TIM_IC_Start_IT+0x68>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e00b      	b.n	8001ff0 <HAL_TIM_IC_Start_IT+0x80>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d104      	bne.n	8001fe8 <HAL_TIM_IC_Start_IT+0x78>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e003      	b.n	8001ff0 <HAL_TIM_IC_Start_IT+0x80>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ff2:	7bbb      	ldrb	r3, [r7, #14]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ff8:	7b7b      	ldrb	r3, [r7, #13]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0b8      	b.n	8002174 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d104      	bne.n	8002012 <HAL_TIM_IC_Start_IT+0xa2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002010:	e013      	b.n	800203a <HAL_TIM_IC_Start_IT+0xca>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d104      	bne.n	8002022 <HAL_TIM_IC_Start_IT+0xb2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002020:	e00b      	b.n	800203a <HAL_TIM_IC_Start_IT+0xca>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d104      	bne.n	8002032 <HAL_TIM_IC_Start_IT+0xc2>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002030:	e003      	b.n	800203a <HAL_TIM_IC_Start_IT+0xca>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_TIM_IC_Start_IT+0xda>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002048:	e013      	b.n	8002072 <HAL_TIM_IC_Start_IT+0x102>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d104      	bne.n	800205a <HAL_TIM_IC_Start_IT+0xea>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002058:	e00b      	b.n	8002072 <HAL_TIM_IC_Start_IT+0x102>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d104      	bne.n	800206a <HAL_TIM_IC_Start_IT+0xfa>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002068:	e003      	b.n	8002072 <HAL_TIM_IC_Start_IT+0x102>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d841      	bhi.n	80020fc <HAL_TIM_IC_Start_IT+0x18c>
 8002078:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <HAL_TIM_IC_Start_IT+0x110>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	080020b5 	.word	0x080020b5
 8002084:	080020fd 	.word	0x080020fd
 8002088:	080020fd 	.word	0x080020fd
 800208c:	080020fd 	.word	0x080020fd
 8002090:	080020c7 	.word	0x080020c7
 8002094:	080020fd 	.word	0x080020fd
 8002098:	080020fd 	.word	0x080020fd
 800209c:	080020fd 	.word	0x080020fd
 80020a0:	080020d9 	.word	0x080020d9
 80020a4:	080020fd 	.word	0x080020fd
 80020a8:	080020fd 	.word	0x080020fd
 80020ac:	080020fd 	.word	0x080020fd
 80020b0:	080020eb 	.word	0x080020eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0202 	orr.w	r2, r2, #2
 80020c2:	60da      	str	r2, [r3, #12]
      break;
 80020c4:	e01d      	b.n	8002102 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0204 	orr.w	r2, r2, #4
 80020d4:	60da      	str	r2, [r3, #12]
      break;
 80020d6:	e014      	b.n	8002102 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0208 	orr.w	r2, r2, #8
 80020e6:	60da      	str	r2, [r3, #12]
      break;
 80020e8:	e00b      	b.n	8002102 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0210 	orr.w	r2, r2, #16
 80020f8:	60da      	str	r2, [r3, #12]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	bf00      	nop
  }

  if (status == HAL_OK)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d134      	bne.n	8002172 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fbb4 	bl	800287e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <HAL_TIM_IC_Start_IT+0x20c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_TIM_IC_Start_IT+0x1ce>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d009      	beq.n	800213e <HAL_TIM_IC_Start_IT+0x1ce>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_TIM_IC_Start_IT+0x210>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_TIM_IC_Start_IT+0x1ce>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_TIM_IC_Start_IT+0x214>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b06      	cmp	r3, #6
 800214e:	d010      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002160:	e007      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40012c00 	.word	0x40012c00
 8002180:	40000400 	.word	0x40000400
 8002184:	40000800 	.word	0x40000800

08002188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0202 	mvn.w	r2, #2
 80021b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fbd0 	bl	8000970 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f9c9 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f9cf 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0204 	mvn.w	r2, #4
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fba6 	bl	8000970 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f99f 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9a5 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b08      	cmp	r3, #8
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b08      	cmp	r3, #8
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0208 	mvn.w	r2, #8
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2204      	movs	r2, #4
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fb7c 	bl	8000970 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f975 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f97b 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b10      	cmp	r3, #16
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0210 	mvn.w	r2, #16
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2208      	movs	r2, #8
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fb52 	bl	8000970 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f94b 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f951 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0201 	mvn.w	r2, #1
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f926 	bl	8002558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	2b80      	cmp	r3, #128	; 0x80
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fb2f 	bl	8002996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002350:	2b40      	cmp	r3, #64	; 0x40
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f915 	bl	800258e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b20      	cmp	r3, #32
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b20      	cmp	r3, #32
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0220 	mvn.w	r2, #32
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fafa 	bl	8002984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e088      	b.n	80024c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80023d4:	f000 f946 	bl	8002664 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 020c 	bic.w	r2, r2, #12
 80023e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	619a      	str	r2, [r3, #24]
 80023fa:	e060      	b.n	80024be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d11c      	bne.n	800243c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002412:	f000 f981 	bl	8002718 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002424:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6999      	ldr	r1, [r3, #24]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	021a      	lsls	r2, r3, #8
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	e040      	b.n	80024be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d11b      	bne.n	800247a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002452:	f000 f99d 	bl	8002790 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020c 	bic.w	r2, r2, #12
 8002464:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69d9      	ldr	r1, [r3, #28]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	61da      	str	r2, [r3, #28]
 8002478:	e021      	b.n	80024be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d11c      	bne.n	80024ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002490:	f000 f9b9 	bl	8002806 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69d9      	ldr	r1, [r3, #28]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	021a      	lsls	r2, r3, #8
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	61da      	str	r2, [r3, #28]
 80024b8:	e001      	b.n	80024be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d831      	bhi.n	8002548 <HAL_TIM_ReadCapturedValue+0x78>
 80024e4:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ea:	bf00      	nop
 80024ec:	08002521 	.word	0x08002521
 80024f0:	08002549 	.word	0x08002549
 80024f4:	08002549 	.word	0x08002549
 80024f8:	08002549 	.word	0x08002549
 80024fc:	0800252b 	.word	0x0800252b
 8002500:	08002549 	.word	0x08002549
 8002504:	08002549 	.word	0x08002549
 8002508:	08002549 	.word	0x08002549
 800250c:	08002535 	.word	0x08002535
 8002510:	08002549 	.word	0x08002549
 8002514:	08002549 	.word	0x08002549
 8002518:	08002549 	.word	0x08002549
 800251c:	0800253f 	.word	0x0800253f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002526:	60fb      	str	r3, [r7, #12]

      break;
 8002528:	e00f      	b.n	800254a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	60fb      	str	r3, [r7, #12]

      break;
 8002532:	e00a      	b.n	800254a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	60fb      	str	r3, [r7, #12]

      break;
 800253c:	e005      	b.n	800254a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	60fb      	str	r3, [r7, #12]

      break;
 8002546:	e000      	b.n	800254a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002548:	bf00      	nop
  }

  return tmpreg;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <TIM_Base_SetConfig+0xb8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00b      	beq.n	80025d0 <TIM_Base_SetConfig+0x30>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025be:	d007      	beq.n	80025d0 <TIM_Base_SetConfig+0x30>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a26      	ldr	r2, [pc, #152]	; (800265c <TIM_Base_SetConfig+0xbc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <TIM_Base_SetConfig+0x30>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a25      	ldr	r2, [pc, #148]	; (8002660 <TIM_Base_SetConfig+0xc0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <TIM_Base_SetConfig+0xb8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00b      	beq.n	8002602 <TIM_Base_SetConfig+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d007      	beq.n	8002602 <TIM_Base_SetConfig+0x62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <TIM_Base_SetConfig+0xbc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <TIM_Base_SetConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <TIM_Base_SetConfig+0xc0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <TIM_Base_SetConfig+0xb8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	615a      	str	r2, [r3, #20]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40000400 	.word	0x40000400
 8002660:	40000800 	.word	0x40000800

08002664 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f023 0201 	bic.w	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <TIM_TI1_SetConfig+0xa8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_TI1_SetConfig+0x46>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d007      	beq.n	80026aa <TIM_TI1_SetConfig+0x46>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <TIM_TI1_SetConfig+0xac>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_TI1_SetConfig+0x46>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <TIM_TI1_SetConfig+0xb0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <TIM_TI1_SetConfig+0x4a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <TIM_TI1_SetConfig+0x4c>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e003      	b.n	80026ce <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f023 030a 	bic.w	r3, r3, #10
 80026e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f003 030a 	and.w	r3, r3, #10
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800

08002718 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 0210 	bic.w	r2, r3, #16
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	031b      	lsls	r3, r3, #12
 800275c:	b29b      	uxth	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800276a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	621a      	str	r2, [r3, #32]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f023 0303 	bic.w	r3, r3, #3
 80027bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	621a      	str	r2, [r3, #32]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002832:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002844:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	031b      	lsls	r3, r3, #12
 800284a:	b29b      	uxth	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002858:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	031b      	lsls	r3, r3, #12
 800285e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2201      	movs	r2, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	621a      	str	r2, [r3, #32]
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028dc:	2302      	movs	r3, #2
 80028de:	e046      	b.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d009      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4313      	orrs	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800

08002984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e042      	b.n	8002a40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fa50 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f91d 	bl	8002c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d16d      	bne.n	8002b44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_UART_Transmit+0x2c>
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e066      	b.n	8002b46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	; 0x21
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fb3b 	bl	8001100 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_UART_Transmit+0x6c>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e003      	b.n	8002abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002abc:	e02a      	b.n	8002b14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f840 	bl	8002b4e <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e036      	b.n	8002b46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3302      	adds	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e007      	b.n	8002b06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1cf      	bne.n	8002abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f810 	bl	8002b4e <UART_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e006      	b.n	8002b46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b090      	sub	sp, #64	; 0x40
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5e:	e050      	b.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d04c      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b6e:	f7fe fac7 	bl	8001100 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d241      	bcs.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b9e:	637a      	str	r2, [r7, #52]	; 0x34
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e5      	bne.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd2:	623a      	str	r2, [r7, #32]
 8002bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	69f9      	ldr	r1, [r7, #28]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e5      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e00f      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d09f      	beq.n	8002b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3740      	adds	r7, #64	; 0x40
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c66:	f023 030c 	bic.w	r3, r3, #12
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <UART_SetConfig+0x114>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d103      	bne.n	8002c9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c94:	f7ff f8ea 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	e002      	b.n	8002ca2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f7ff f8d2 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <UART_SetConfig+0x118>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	0119      	lsls	r1, r3, #4
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009a      	lsls	r2, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <UART_SetConfig+0x118>)
 8002cda:	fba3 0302 	umull	r0, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	fb00 f303 	mul.w	r3, r0, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	3332      	adds	r3, #50	; 0x32
 8002cec:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <UART_SetConfig+0x118>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf8:	4419      	add	r1, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <UART_SetConfig+0x118>)
 8002d12:	fba3 0302 	umull	r0, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2064      	movs	r0, #100	; 0x64
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	; 0x32
 8002d24:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <UART_SetConfig+0x118>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	440a      	add	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40013800 	.word	0x40013800
 8002d44:	51eb851f 	.word	0x51eb851f

08002d48 <sniprintf>:
 8002d48:	b40c      	push	{r2, r3}
 8002d4a:	b530      	push	{r4, r5, lr}
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <sniprintf+0x64>)
 8002d4e:	1e0c      	subs	r4, r1, #0
 8002d50:	681d      	ldr	r5, [r3, #0]
 8002d52:	b09d      	sub	sp, #116	; 0x74
 8002d54:	da08      	bge.n	8002d68 <sniprintf+0x20>
 8002d56:	238b      	movs	r3, #139	; 0x8b
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	602b      	str	r3, [r5, #0]
 8002d5e:	b01d      	add	sp, #116	; 0x74
 8002d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d64:	b002      	add	sp, #8
 8002d66:	4770      	bx	lr
 8002d68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d70:	bf0c      	ite	eq
 8002d72:	4623      	moveq	r3, r4
 8002d74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d78:	9304      	str	r3, [sp, #16]
 8002d7a:	9307      	str	r3, [sp, #28]
 8002d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d80:	9002      	str	r0, [sp, #8]
 8002d82:	9006      	str	r0, [sp, #24]
 8002d84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d88:	4628      	mov	r0, r5
 8002d8a:	ab21      	add	r3, sp, #132	; 0x84
 8002d8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d8e:	a902      	add	r1, sp, #8
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	f000 f98f 	bl	80030b4 <_svfiprintf_r>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	bfbc      	itt	lt
 8002d9a:	238b      	movlt	r3, #139	; 0x8b
 8002d9c:	602b      	strlt	r3, [r5, #0]
 8002d9e:	2c00      	cmp	r4, #0
 8002da0:	d0dd      	beq.n	8002d5e <sniprintf+0x16>
 8002da2:	2200      	movs	r2, #0
 8002da4:	9b02      	ldr	r3, [sp, #8]
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e7d9      	b.n	8002d5e <sniprintf+0x16>
 8002daa:	bf00      	nop
 8002dac:	20000058 	.word	0x20000058

08002db0 <memset>:
 8002db0:	4603      	mov	r3, r0
 8002db2:	4402      	add	r2, r0
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	f803 1b01 	strb.w	r1, [r3], #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <__errno>:
 8002dc0:	4b01      	ldr	r3, [pc, #4]	; (8002dc8 <__errno+0x8>)
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000058 	.word	0x20000058

08002dcc <__libc_init_array>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	2600      	movs	r6, #0
 8002dd0:	4d0c      	ldr	r5, [pc, #48]	; (8002e04 <__libc_init_array+0x38>)
 8002dd2:	4c0d      	ldr	r4, [pc, #52]	; (8002e08 <__libc_init_array+0x3c>)
 8002dd4:	1b64      	subs	r4, r4, r5
 8002dd6:	10a4      	asrs	r4, r4, #2
 8002dd8:	42a6      	cmp	r6, r4
 8002dda:	d109      	bne.n	8002df0 <__libc_init_array+0x24>
 8002ddc:	f000 fc7a 	bl	80036d4 <_init>
 8002de0:	2600      	movs	r6, #0
 8002de2:	4d0a      	ldr	r5, [pc, #40]	; (8002e0c <__libc_init_array+0x40>)
 8002de4:	4c0a      	ldr	r4, [pc, #40]	; (8002e10 <__libc_init_array+0x44>)
 8002de6:	1b64      	subs	r4, r4, r5
 8002de8:	10a4      	asrs	r4, r4, #2
 8002dea:	42a6      	cmp	r6, r4
 8002dec:	d105      	bne.n	8002dfa <__libc_init_array+0x2e>
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df4:	4798      	blx	r3
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ee      	b.n	8002dd8 <__libc_init_array+0xc>
 8002dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfe:	4798      	blx	r3
 8002e00:	3601      	adds	r6, #1
 8002e02:	e7f2      	b.n	8002dea <__libc_init_array+0x1e>
 8002e04:	08003760 	.word	0x08003760
 8002e08:	08003760 	.word	0x08003760
 8002e0c:	08003760 	.word	0x08003760
 8002e10:	08003764 	.word	0x08003764

08002e14 <__retarget_lock_acquire_recursive>:
 8002e14:	4770      	bx	lr

08002e16 <__retarget_lock_release_recursive>:
 8002e16:	4770      	bx	lr

08002e18 <_free_r>:
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	d040      	beq.n	8002ea2 <_free_r+0x8a>
 8002e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e24:	1f0c      	subs	r4, r1, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bfb8      	it	lt
 8002e2a:	18e4      	addlt	r4, r4, r3
 8002e2c:	f000 f8dc 	bl	8002fe8 <__malloc_lock>
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <_free_r+0x8c>)
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	b933      	cbnz	r3, 8002e44 <_free_r+0x2c>
 8002e36:	6063      	str	r3, [r4, #4]
 8002e38:	6014      	str	r4, [r2, #0]
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e40:	f000 b8d8 	b.w	8002ff4 <__malloc_unlock>
 8002e44:	42a3      	cmp	r3, r4
 8002e46:	d908      	bls.n	8002e5a <_free_r+0x42>
 8002e48:	6820      	ldr	r0, [r4, #0]
 8002e4a:	1821      	adds	r1, r4, r0
 8002e4c:	428b      	cmp	r3, r1
 8002e4e:	bf01      	itttt	eq
 8002e50:	6819      	ldreq	r1, [r3, #0]
 8002e52:	685b      	ldreq	r3, [r3, #4]
 8002e54:	1809      	addeq	r1, r1, r0
 8002e56:	6021      	streq	r1, [r4, #0]
 8002e58:	e7ed      	b.n	8002e36 <_free_r+0x1e>
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b10b      	cbz	r3, 8002e64 <_free_r+0x4c>
 8002e60:	42a3      	cmp	r3, r4
 8002e62:	d9fa      	bls.n	8002e5a <_free_r+0x42>
 8002e64:	6811      	ldr	r1, [r2, #0]
 8002e66:	1850      	adds	r0, r2, r1
 8002e68:	42a0      	cmp	r0, r4
 8002e6a:	d10b      	bne.n	8002e84 <_free_r+0x6c>
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	4401      	add	r1, r0
 8002e70:	1850      	adds	r0, r2, r1
 8002e72:	4283      	cmp	r3, r0
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	d1e0      	bne.n	8002e3a <_free_r+0x22>
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4408      	add	r0, r1
 8002e7e:	6010      	str	r0, [r2, #0]
 8002e80:	6053      	str	r3, [r2, #4]
 8002e82:	e7da      	b.n	8002e3a <_free_r+0x22>
 8002e84:	d902      	bls.n	8002e8c <_free_r+0x74>
 8002e86:	230c      	movs	r3, #12
 8002e88:	602b      	str	r3, [r5, #0]
 8002e8a:	e7d6      	b.n	8002e3a <_free_r+0x22>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	1821      	adds	r1, r4, r0
 8002e90:	428b      	cmp	r3, r1
 8002e92:	bf01      	itttt	eq
 8002e94:	6819      	ldreq	r1, [r3, #0]
 8002e96:	685b      	ldreq	r3, [r3, #4]
 8002e98:	1809      	addeq	r1, r1, r0
 8002e9a:	6021      	streq	r1, [r4, #0]
 8002e9c:	6063      	str	r3, [r4, #4]
 8002e9e:	6054      	str	r4, [r2, #4]
 8002ea0:	e7cb      	b.n	8002e3a <_free_r+0x22>
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	20000260 	.word	0x20000260

08002ea8 <sbrk_aligned>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	4e0e      	ldr	r6, [pc, #56]	; (8002ee4 <sbrk_aligned+0x3c>)
 8002eac:	460c      	mov	r4, r1
 8002eae:	6831      	ldr	r1, [r6, #0]
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	b911      	cbnz	r1, 8002eba <sbrk_aligned+0x12>
 8002eb4:	f000 fbaa 	bl	800360c <_sbrk_r>
 8002eb8:	6030      	str	r0, [r6, #0]
 8002eba:	4621      	mov	r1, r4
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f000 fba5 	bl	800360c <_sbrk_r>
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	d00a      	beq.n	8002edc <sbrk_aligned+0x34>
 8002ec6:	1cc4      	adds	r4, r0, #3
 8002ec8:	f024 0403 	bic.w	r4, r4, #3
 8002ecc:	42a0      	cmp	r0, r4
 8002ece:	d007      	beq.n	8002ee0 <sbrk_aligned+0x38>
 8002ed0:	1a21      	subs	r1, r4, r0
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f000 fb9a 	bl	800360c <_sbrk_r>
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d101      	bne.n	8002ee0 <sbrk_aligned+0x38>
 8002edc:	f04f 34ff 	mov.w	r4, #4294967295
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	20000264 	.word	0x20000264

08002ee8 <_malloc_r>:
 8002ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eec:	1ccd      	adds	r5, r1, #3
 8002eee:	f025 0503 	bic.w	r5, r5, #3
 8002ef2:	3508      	adds	r5, #8
 8002ef4:	2d0c      	cmp	r5, #12
 8002ef6:	bf38      	it	cc
 8002ef8:	250c      	movcc	r5, #12
 8002efa:	2d00      	cmp	r5, #0
 8002efc:	4607      	mov	r7, r0
 8002efe:	db01      	blt.n	8002f04 <_malloc_r+0x1c>
 8002f00:	42a9      	cmp	r1, r5
 8002f02:	d905      	bls.n	8002f10 <_malloc_r+0x28>
 8002f04:	230c      	movs	r3, #12
 8002f06:	2600      	movs	r6, #0
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fe4 <_malloc_r+0xfc>
 8002f14:	f000 f868 	bl	8002fe8 <__malloc_lock>
 8002f18:	f8d8 3000 	ldr.w	r3, [r8]
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	bb5c      	cbnz	r4, 8002f78 <_malloc_r+0x90>
 8002f20:	4629      	mov	r1, r5
 8002f22:	4638      	mov	r0, r7
 8002f24:	f7ff ffc0 	bl	8002ea8 <sbrk_aligned>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	d155      	bne.n	8002fda <_malloc_r+0xf2>
 8002f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8002f32:	4626      	mov	r6, r4
 8002f34:	2e00      	cmp	r6, #0
 8002f36:	d145      	bne.n	8002fc4 <_malloc_r+0xdc>
 8002f38:	2c00      	cmp	r4, #0
 8002f3a:	d048      	beq.n	8002fce <_malloc_r+0xe6>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4638      	mov	r0, r7
 8002f42:	eb04 0903 	add.w	r9, r4, r3
 8002f46:	f000 fb61 	bl	800360c <_sbrk_r>
 8002f4a:	4581      	cmp	r9, r0
 8002f4c:	d13f      	bne.n	8002fce <_malloc_r+0xe6>
 8002f4e:	6821      	ldr	r1, [r4, #0]
 8002f50:	4638      	mov	r0, r7
 8002f52:	1a6d      	subs	r5, r5, r1
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7ff ffa7 	bl	8002ea8 <sbrk_aligned>
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	d037      	beq.n	8002fce <_malloc_r+0xe6>
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	442b      	add	r3, r5
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	f8d8 3000 	ldr.w	r3, [r8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d038      	beq.n	8002fde <_malloc_r+0xf6>
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	42a2      	cmp	r2, r4
 8002f70:	d12b      	bne.n	8002fca <_malloc_r+0xe2>
 8002f72:	2200      	movs	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	e00f      	b.n	8002f98 <_malloc_r+0xb0>
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	1b52      	subs	r2, r2, r5
 8002f7c:	d41f      	bmi.n	8002fbe <_malloc_r+0xd6>
 8002f7e:	2a0b      	cmp	r2, #11
 8002f80:	d917      	bls.n	8002fb2 <_malloc_r+0xca>
 8002f82:	1961      	adds	r1, r4, r5
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	6025      	str	r5, [r4, #0]
 8002f88:	bf18      	it	ne
 8002f8a:	6059      	strne	r1, [r3, #4]
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	bf08      	it	eq
 8002f90:	f8c8 1000 	streq.w	r1, [r8]
 8002f94:	5162      	str	r2, [r4, r5]
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	4638      	mov	r0, r7
 8002f9a:	f104 060b 	add.w	r6, r4, #11
 8002f9e:	f000 f829 	bl	8002ff4 <__malloc_unlock>
 8002fa2:	f026 0607 	bic.w	r6, r6, #7
 8002fa6:	1d23      	adds	r3, r4, #4
 8002fa8:	1af2      	subs	r2, r6, r3
 8002faa:	d0ae      	beq.n	8002f0a <_malloc_r+0x22>
 8002fac:	1b9b      	subs	r3, r3, r6
 8002fae:	50a3      	str	r3, [r4, r2]
 8002fb0:	e7ab      	b.n	8002f0a <_malloc_r+0x22>
 8002fb2:	42a3      	cmp	r3, r4
 8002fb4:	6862      	ldr	r2, [r4, #4]
 8002fb6:	d1dd      	bne.n	8002f74 <_malloc_r+0x8c>
 8002fb8:	f8c8 2000 	str.w	r2, [r8]
 8002fbc:	e7ec      	b.n	8002f98 <_malloc_r+0xb0>
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	6864      	ldr	r4, [r4, #4]
 8002fc2:	e7ac      	b.n	8002f1e <_malloc_r+0x36>
 8002fc4:	4634      	mov	r4, r6
 8002fc6:	6876      	ldr	r6, [r6, #4]
 8002fc8:	e7b4      	b.n	8002f34 <_malloc_r+0x4c>
 8002fca:	4613      	mov	r3, r2
 8002fcc:	e7cc      	b.n	8002f68 <_malloc_r+0x80>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	4638      	mov	r0, r7
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	f000 f80e 	bl	8002ff4 <__malloc_unlock>
 8002fd8:	e797      	b.n	8002f0a <_malloc_r+0x22>
 8002fda:	6025      	str	r5, [r4, #0]
 8002fdc:	e7dc      	b.n	8002f98 <_malloc_r+0xb0>
 8002fde:	605b      	str	r3, [r3, #4]
 8002fe0:	deff      	udf	#255	; 0xff
 8002fe2:	bf00      	nop
 8002fe4:	20000260 	.word	0x20000260

08002fe8 <__malloc_lock>:
 8002fe8:	4801      	ldr	r0, [pc, #4]	; (8002ff0 <__malloc_lock+0x8>)
 8002fea:	f7ff bf13 	b.w	8002e14 <__retarget_lock_acquire_recursive>
 8002fee:	bf00      	nop
 8002ff0:	2000025c 	.word	0x2000025c

08002ff4 <__malloc_unlock>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__malloc_unlock+0x8>)
 8002ff6:	f7ff bf0e 	b.w	8002e16 <__retarget_lock_release_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	2000025c 	.word	0x2000025c

08003000 <__ssputs_r>:
 8003000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003004:	461f      	mov	r7, r3
 8003006:	688e      	ldr	r6, [r1, #8]
 8003008:	4682      	mov	sl, r0
 800300a:	42be      	cmp	r6, r7
 800300c:	460c      	mov	r4, r1
 800300e:	4690      	mov	r8, r2
 8003010:	680b      	ldr	r3, [r1, #0]
 8003012:	d82c      	bhi.n	800306e <__ssputs_r+0x6e>
 8003014:	898a      	ldrh	r2, [r1, #12]
 8003016:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800301a:	d026      	beq.n	800306a <__ssputs_r+0x6a>
 800301c:	6965      	ldr	r5, [r4, #20]
 800301e:	6909      	ldr	r1, [r1, #16]
 8003020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003024:	eba3 0901 	sub.w	r9, r3, r1
 8003028:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800302c:	1c7b      	adds	r3, r7, #1
 800302e:	444b      	add	r3, r9
 8003030:	106d      	asrs	r5, r5, #1
 8003032:	429d      	cmp	r5, r3
 8003034:	bf38      	it	cc
 8003036:	461d      	movcc	r5, r3
 8003038:	0553      	lsls	r3, r2, #21
 800303a:	d527      	bpl.n	800308c <__ssputs_r+0x8c>
 800303c:	4629      	mov	r1, r5
 800303e:	f7ff ff53 	bl	8002ee8 <_malloc_r>
 8003042:	4606      	mov	r6, r0
 8003044:	b360      	cbz	r0, 80030a0 <__ssputs_r+0xa0>
 8003046:	464a      	mov	r2, r9
 8003048:	6921      	ldr	r1, [r4, #16]
 800304a:	f000 fafd 	bl	8003648 <memcpy>
 800304e:	89a3      	ldrh	r3, [r4, #12]
 8003050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	6126      	str	r6, [r4, #16]
 800305c:	444e      	add	r6, r9
 800305e:	6026      	str	r6, [r4, #0]
 8003060:	463e      	mov	r6, r7
 8003062:	6165      	str	r5, [r4, #20]
 8003064:	eba5 0509 	sub.w	r5, r5, r9
 8003068:	60a5      	str	r5, [r4, #8]
 800306a:	42be      	cmp	r6, r7
 800306c:	d900      	bls.n	8003070 <__ssputs_r+0x70>
 800306e:	463e      	mov	r6, r7
 8003070:	4632      	mov	r2, r6
 8003072:	4641      	mov	r1, r8
 8003074:	6820      	ldr	r0, [r4, #0]
 8003076:	f000 faaf 	bl	80035d8 <memmove>
 800307a:	2000      	movs	r0, #0
 800307c:	68a3      	ldr	r3, [r4, #8]
 800307e:	1b9b      	subs	r3, r3, r6
 8003080:	60a3      	str	r3, [r4, #8]
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	4433      	add	r3, r6
 8003086:	6023      	str	r3, [r4, #0]
 8003088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800308c:	462a      	mov	r2, r5
 800308e:	f000 fae9 	bl	8003664 <_realloc_r>
 8003092:	4606      	mov	r6, r0
 8003094:	2800      	cmp	r0, #0
 8003096:	d1e0      	bne.n	800305a <__ssputs_r+0x5a>
 8003098:	4650      	mov	r0, sl
 800309a:	6921      	ldr	r1, [r4, #16]
 800309c:	f7ff febc 	bl	8002e18 <_free_r>
 80030a0:	230c      	movs	r3, #12
 80030a2:	f8ca 3000 	str.w	r3, [sl]
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b0:	81a3      	strh	r3, [r4, #12]
 80030b2:	e7e9      	b.n	8003088 <__ssputs_r+0x88>

080030b4 <_svfiprintf_r>:
 80030b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b8:	4698      	mov	r8, r3
 80030ba:	898b      	ldrh	r3, [r1, #12]
 80030bc:	4607      	mov	r7, r0
 80030be:	061b      	lsls	r3, r3, #24
 80030c0:	460d      	mov	r5, r1
 80030c2:	4614      	mov	r4, r2
 80030c4:	b09d      	sub	sp, #116	; 0x74
 80030c6:	d50e      	bpl.n	80030e6 <_svfiprintf_r+0x32>
 80030c8:	690b      	ldr	r3, [r1, #16]
 80030ca:	b963      	cbnz	r3, 80030e6 <_svfiprintf_r+0x32>
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	f7ff ff0b 	bl	8002ee8 <_malloc_r>
 80030d2:	6028      	str	r0, [r5, #0]
 80030d4:	6128      	str	r0, [r5, #16]
 80030d6:	b920      	cbnz	r0, 80030e2 <_svfiprintf_r+0x2e>
 80030d8:	230c      	movs	r3, #12
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	e0d0      	b.n	8003284 <_svfiprintf_r+0x1d0>
 80030e2:	2340      	movs	r3, #64	; 0x40
 80030e4:	616b      	str	r3, [r5, #20]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9309      	str	r3, [sp, #36]	; 0x24
 80030ea:	2320      	movs	r3, #32
 80030ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030f0:	2330      	movs	r3, #48	; 0x30
 80030f2:	f04f 0901 	mov.w	r9, #1
 80030f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800329c <_svfiprintf_r+0x1e8>
 80030fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003102:	4623      	mov	r3, r4
 8003104:	469a      	mov	sl, r3
 8003106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800310a:	b10a      	cbz	r2, 8003110 <_svfiprintf_r+0x5c>
 800310c:	2a25      	cmp	r2, #37	; 0x25
 800310e:	d1f9      	bne.n	8003104 <_svfiprintf_r+0x50>
 8003110:	ebba 0b04 	subs.w	fp, sl, r4
 8003114:	d00b      	beq.n	800312e <_svfiprintf_r+0x7a>
 8003116:	465b      	mov	r3, fp
 8003118:	4622      	mov	r2, r4
 800311a:	4629      	mov	r1, r5
 800311c:	4638      	mov	r0, r7
 800311e:	f7ff ff6f 	bl	8003000 <__ssputs_r>
 8003122:	3001      	adds	r0, #1
 8003124:	f000 80a9 	beq.w	800327a <_svfiprintf_r+0x1c6>
 8003128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800312a:	445a      	add	r2, fp
 800312c:	9209      	str	r2, [sp, #36]	; 0x24
 800312e:	f89a 3000 	ldrb.w	r3, [sl]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80a1 	beq.w	800327a <_svfiprintf_r+0x1c6>
 8003138:	2300      	movs	r3, #0
 800313a:	f04f 32ff 	mov.w	r2, #4294967295
 800313e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003142:	f10a 0a01 	add.w	sl, sl, #1
 8003146:	9304      	str	r3, [sp, #16]
 8003148:	9307      	str	r3, [sp, #28]
 800314a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800314e:	931a      	str	r3, [sp, #104]	; 0x68
 8003150:	4654      	mov	r4, sl
 8003152:	2205      	movs	r2, #5
 8003154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003158:	4850      	ldr	r0, [pc, #320]	; (800329c <_svfiprintf_r+0x1e8>)
 800315a:	f000 fa67 	bl	800362c <memchr>
 800315e:	9a04      	ldr	r2, [sp, #16]
 8003160:	b9d8      	cbnz	r0, 800319a <_svfiprintf_r+0xe6>
 8003162:	06d0      	lsls	r0, r2, #27
 8003164:	bf44      	itt	mi
 8003166:	2320      	movmi	r3, #32
 8003168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800316c:	0711      	lsls	r1, r2, #28
 800316e:	bf44      	itt	mi
 8003170:	232b      	movmi	r3, #43	; 0x2b
 8003172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003176:	f89a 3000 	ldrb.w	r3, [sl]
 800317a:	2b2a      	cmp	r3, #42	; 0x2a
 800317c:	d015      	beq.n	80031aa <_svfiprintf_r+0xf6>
 800317e:	4654      	mov	r4, sl
 8003180:	2000      	movs	r0, #0
 8003182:	f04f 0c0a 	mov.w	ip, #10
 8003186:	9a07      	ldr	r2, [sp, #28]
 8003188:	4621      	mov	r1, r4
 800318a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800318e:	3b30      	subs	r3, #48	; 0x30
 8003190:	2b09      	cmp	r3, #9
 8003192:	d94d      	bls.n	8003230 <_svfiprintf_r+0x17c>
 8003194:	b1b0      	cbz	r0, 80031c4 <_svfiprintf_r+0x110>
 8003196:	9207      	str	r2, [sp, #28]
 8003198:	e014      	b.n	80031c4 <_svfiprintf_r+0x110>
 800319a:	eba0 0308 	sub.w	r3, r0, r8
 800319e:	fa09 f303 	lsl.w	r3, r9, r3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	46a2      	mov	sl, r4
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	e7d2      	b.n	8003150 <_svfiprintf_r+0x9c>
 80031aa:	9b03      	ldr	r3, [sp, #12]
 80031ac:	1d19      	adds	r1, r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	9103      	str	r1, [sp, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bfbb      	ittet	lt
 80031b6:	425b      	neglt	r3, r3
 80031b8:	f042 0202 	orrlt.w	r2, r2, #2
 80031bc:	9307      	strge	r3, [sp, #28]
 80031be:	9307      	strlt	r3, [sp, #28]
 80031c0:	bfb8      	it	lt
 80031c2:	9204      	strlt	r2, [sp, #16]
 80031c4:	7823      	ldrb	r3, [r4, #0]
 80031c6:	2b2e      	cmp	r3, #46	; 0x2e
 80031c8:	d10c      	bne.n	80031e4 <_svfiprintf_r+0x130>
 80031ca:	7863      	ldrb	r3, [r4, #1]
 80031cc:	2b2a      	cmp	r3, #42	; 0x2a
 80031ce:	d134      	bne.n	800323a <_svfiprintf_r+0x186>
 80031d0:	9b03      	ldr	r3, [sp, #12]
 80031d2:	3402      	adds	r4, #2
 80031d4:	1d1a      	adds	r2, r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	9203      	str	r2, [sp, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bfb8      	it	lt
 80031de:	f04f 33ff 	movlt.w	r3, #4294967295
 80031e2:	9305      	str	r3, [sp, #20]
 80031e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80032a0 <_svfiprintf_r+0x1ec>
 80031e8:	2203      	movs	r2, #3
 80031ea:	4650      	mov	r0, sl
 80031ec:	7821      	ldrb	r1, [r4, #0]
 80031ee:	f000 fa1d 	bl	800362c <memchr>
 80031f2:	b138      	cbz	r0, 8003204 <_svfiprintf_r+0x150>
 80031f4:	2240      	movs	r2, #64	; 0x40
 80031f6:	9b04      	ldr	r3, [sp, #16]
 80031f8:	eba0 000a 	sub.w	r0, r0, sl
 80031fc:	4082      	lsls	r2, r0
 80031fe:	4313      	orrs	r3, r2
 8003200:	3401      	adds	r4, #1
 8003202:	9304      	str	r3, [sp, #16]
 8003204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003208:	2206      	movs	r2, #6
 800320a:	4826      	ldr	r0, [pc, #152]	; (80032a4 <_svfiprintf_r+0x1f0>)
 800320c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003210:	f000 fa0c 	bl	800362c <memchr>
 8003214:	2800      	cmp	r0, #0
 8003216:	d038      	beq.n	800328a <_svfiprintf_r+0x1d6>
 8003218:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <_svfiprintf_r+0x1f4>)
 800321a:	bb1b      	cbnz	r3, 8003264 <_svfiprintf_r+0x1b0>
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	3307      	adds	r3, #7
 8003220:	f023 0307 	bic.w	r3, r3, #7
 8003224:	3308      	adds	r3, #8
 8003226:	9303      	str	r3, [sp, #12]
 8003228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800322a:	4433      	add	r3, r6
 800322c:	9309      	str	r3, [sp, #36]	; 0x24
 800322e:	e768      	b.n	8003102 <_svfiprintf_r+0x4e>
 8003230:	460c      	mov	r4, r1
 8003232:	2001      	movs	r0, #1
 8003234:	fb0c 3202 	mla	r2, ip, r2, r3
 8003238:	e7a6      	b.n	8003188 <_svfiprintf_r+0xd4>
 800323a:	2300      	movs	r3, #0
 800323c:	f04f 0c0a 	mov.w	ip, #10
 8003240:	4619      	mov	r1, r3
 8003242:	3401      	adds	r4, #1
 8003244:	9305      	str	r3, [sp, #20]
 8003246:	4620      	mov	r0, r4
 8003248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800324c:	3a30      	subs	r2, #48	; 0x30
 800324e:	2a09      	cmp	r2, #9
 8003250:	d903      	bls.n	800325a <_svfiprintf_r+0x1a6>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0c6      	beq.n	80031e4 <_svfiprintf_r+0x130>
 8003256:	9105      	str	r1, [sp, #20]
 8003258:	e7c4      	b.n	80031e4 <_svfiprintf_r+0x130>
 800325a:	4604      	mov	r4, r0
 800325c:	2301      	movs	r3, #1
 800325e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003262:	e7f0      	b.n	8003246 <_svfiprintf_r+0x192>
 8003264:	ab03      	add	r3, sp, #12
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	462a      	mov	r2, r5
 800326a:	4638      	mov	r0, r7
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <_svfiprintf_r+0x1f8>)
 800326e:	a904      	add	r1, sp, #16
 8003270:	f3af 8000 	nop.w
 8003274:	1c42      	adds	r2, r0, #1
 8003276:	4606      	mov	r6, r0
 8003278:	d1d6      	bne.n	8003228 <_svfiprintf_r+0x174>
 800327a:	89ab      	ldrh	r3, [r5, #12]
 800327c:	065b      	lsls	r3, r3, #25
 800327e:	f53f af2d 	bmi.w	80030dc <_svfiprintf_r+0x28>
 8003282:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003284:	b01d      	add	sp, #116	; 0x74
 8003286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328a:	ab03      	add	r3, sp, #12
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	462a      	mov	r2, r5
 8003290:	4638      	mov	r0, r7
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <_svfiprintf_r+0x1f8>)
 8003294:	a904      	add	r1, sp, #16
 8003296:	f000 f87d 	bl	8003394 <_printf_i>
 800329a:	e7eb      	b.n	8003274 <_svfiprintf_r+0x1c0>
 800329c:	0800372a 	.word	0x0800372a
 80032a0:	08003730 	.word	0x08003730
 80032a4:	08003734 	.word	0x08003734
 80032a8:	00000000 	.word	0x00000000
 80032ac:	08003001 	.word	0x08003001

080032b0 <_printf_common>:
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	4616      	mov	r6, r2
 80032b6:	4699      	mov	r9, r3
 80032b8:	688a      	ldr	r2, [r1, #8]
 80032ba:	690b      	ldr	r3, [r1, #16]
 80032bc:	4607      	mov	r7, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	bfb8      	it	lt
 80032c2:	4613      	movlt	r3, r2
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ca:	460c      	mov	r4, r1
 80032cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d0:	b10a      	cbz	r2, 80032d6 <_printf_common+0x26>
 80032d2:	3301      	adds	r3, #1
 80032d4:	6033      	str	r3, [r6, #0]
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	0699      	lsls	r1, r3, #26
 80032da:	bf42      	ittt	mi
 80032dc:	6833      	ldrmi	r3, [r6, #0]
 80032de:	3302      	addmi	r3, #2
 80032e0:	6033      	strmi	r3, [r6, #0]
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	f015 0506 	ands.w	r5, r5, #6
 80032e8:	d106      	bne.n	80032f8 <_printf_common+0x48>
 80032ea:	f104 0a19 	add.w	sl, r4, #25
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	6832      	ldr	r2, [r6, #0]
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	dc2b      	bgt.n	8003350 <_printf_common+0xa0>
 80032f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032fc:	1e13      	subs	r3, r2, #0
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	bf18      	it	ne
 8003302:	2301      	movne	r3, #1
 8003304:	0692      	lsls	r2, r2, #26
 8003306:	d430      	bmi.n	800336a <_printf_common+0xba>
 8003308:	4649      	mov	r1, r9
 800330a:	4638      	mov	r0, r7
 800330c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003310:	47c0      	blx	r8
 8003312:	3001      	adds	r0, #1
 8003314:	d023      	beq.n	800335e <_printf_common+0xae>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	6922      	ldr	r2, [r4, #16]
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf14      	ite	ne
 8003322:	2500      	movne	r5, #0
 8003324:	6833      	ldreq	r3, [r6, #0]
 8003326:	f04f 0600 	mov.w	r6, #0
 800332a:	bf08      	it	eq
 800332c:	68e5      	ldreq	r5, [r4, #12]
 800332e:	f104 041a 	add.w	r4, r4, #26
 8003332:	bf08      	it	eq
 8003334:	1aed      	subeq	r5, r5, r3
 8003336:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800333a:	bf08      	it	eq
 800333c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003340:	4293      	cmp	r3, r2
 8003342:	bfc4      	itt	gt
 8003344:	1a9b      	subgt	r3, r3, r2
 8003346:	18ed      	addgt	r5, r5, r3
 8003348:	42b5      	cmp	r5, r6
 800334a:	d11a      	bne.n	8003382 <_printf_common+0xd2>
 800334c:	2000      	movs	r0, #0
 800334e:	e008      	b.n	8003362 <_printf_common+0xb2>
 8003350:	2301      	movs	r3, #1
 8003352:	4652      	mov	r2, sl
 8003354:	4649      	mov	r1, r9
 8003356:	4638      	mov	r0, r7
 8003358:	47c0      	blx	r8
 800335a:	3001      	adds	r0, #1
 800335c:	d103      	bne.n	8003366 <_printf_common+0xb6>
 800335e:	f04f 30ff 	mov.w	r0, #4294967295
 8003362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003366:	3501      	adds	r5, #1
 8003368:	e7c1      	b.n	80032ee <_printf_common+0x3e>
 800336a:	2030      	movs	r0, #48	; 0x30
 800336c:	18e1      	adds	r1, r4, r3
 800336e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003378:	4422      	add	r2, r4
 800337a:	3302      	adds	r3, #2
 800337c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003380:	e7c2      	b.n	8003308 <_printf_common+0x58>
 8003382:	2301      	movs	r3, #1
 8003384:	4622      	mov	r2, r4
 8003386:	4649      	mov	r1, r9
 8003388:	4638      	mov	r0, r7
 800338a:	47c0      	blx	r8
 800338c:	3001      	adds	r0, #1
 800338e:	d0e6      	beq.n	800335e <_printf_common+0xae>
 8003390:	3601      	adds	r6, #1
 8003392:	e7d9      	b.n	8003348 <_printf_common+0x98>

08003394 <_printf_i>:
 8003394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003398:	7e0f      	ldrb	r7, [r1, #24]
 800339a:	4691      	mov	r9, r2
 800339c:	2f78      	cmp	r7, #120	; 0x78
 800339e:	4680      	mov	r8, r0
 80033a0:	460c      	mov	r4, r1
 80033a2:	469a      	mov	sl, r3
 80033a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033aa:	d807      	bhi.n	80033bc <_printf_i+0x28>
 80033ac:	2f62      	cmp	r7, #98	; 0x62
 80033ae:	d80a      	bhi.n	80033c6 <_printf_i+0x32>
 80033b0:	2f00      	cmp	r7, #0
 80033b2:	f000 80d5 	beq.w	8003560 <_printf_i+0x1cc>
 80033b6:	2f58      	cmp	r7, #88	; 0x58
 80033b8:	f000 80c1 	beq.w	800353e <_printf_i+0x1aa>
 80033bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033c4:	e03a      	b.n	800343c <_printf_i+0xa8>
 80033c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033ca:	2b15      	cmp	r3, #21
 80033cc:	d8f6      	bhi.n	80033bc <_printf_i+0x28>
 80033ce:	a101      	add	r1, pc, #4	; (adr r1, 80033d4 <_printf_i+0x40>)
 80033d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033d4:	0800342d 	.word	0x0800342d
 80033d8:	08003441 	.word	0x08003441
 80033dc:	080033bd 	.word	0x080033bd
 80033e0:	080033bd 	.word	0x080033bd
 80033e4:	080033bd 	.word	0x080033bd
 80033e8:	080033bd 	.word	0x080033bd
 80033ec:	08003441 	.word	0x08003441
 80033f0:	080033bd 	.word	0x080033bd
 80033f4:	080033bd 	.word	0x080033bd
 80033f8:	080033bd 	.word	0x080033bd
 80033fc:	080033bd 	.word	0x080033bd
 8003400:	08003547 	.word	0x08003547
 8003404:	0800346d 	.word	0x0800346d
 8003408:	08003501 	.word	0x08003501
 800340c:	080033bd 	.word	0x080033bd
 8003410:	080033bd 	.word	0x080033bd
 8003414:	08003569 	.word	0x08003569
 8003418:	080033bd 	.word	0x080033bd
 800341c:	0800346d 	.word	0x0800346d
 8003420:	080033bd 	.word	0x080033bd
 8003424:	080033bd 	.word	0x080033bd
 8003428:	08003509 	.word	0x08003509
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	602a      	str	r2, [r5, #0]
 8003434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800343c:	2301      	movs	r3, #1
 800343e:	e0a0      	b.n	8003582 <_printf_i+0x1ee>
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	682b      	ldr	r3, [r5, #0]
 8003444:	0607      	lsls	r7, r0, #24
 8003446:	f103 0104 	add.w	r1, r3, #4
 800344a:	6029      	str	r1, [r5, #0]
 800344c:	d501      	bpl.n	8003452 <_printf_i+0xbe>
 800344e:	681e      	ldr	r6, [r3, #0]
 8003450:	e003      	b.n	800345a <_printf_i+0xc6>
 8003452:	0646      	lsls	r6, r0, #25
 8003454:	d5fb      	bpl.n	800344e <_printf_i+0xba>
 8003456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800345a:	2e00      	cmp	r6, #0
 800345c:	da03      	bge.n	8003466 <_printf_i+0xd2>
 800345e:	232d      	movs	r3, #45	; 0x2d
 8003460:	4276      	negs	r6, r6
 8003462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003466:	230a      	movs	r3, #10
 8003468:	4859      	ldr	r0, [pc, #356]	; (80035d0 <_printf_i+0x23c>)
 800346a:	e012      	b.n	8003492 <_printf_i+0xfe>
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	1d19      	adds	r1, r3, #4
 8003472:	6029      	str	r1, [r5, #0]
 8003474:	0605      	lsls	r5, r0, #24
 8003476:	d501      	bpl.n	800347c <_printf_i+0xe8>
 8003478:	681e      	ldr	r6, [r3, #0]
 800347a:	e002      	b.n	8003482 <_printf_i+0xee>
 800347c:	0641      	lsls	r1, r0, #25
 800347e:	d5fb      	bpl.n	8003478 <_printf_i+0xe4>
 8003480:	881e      	ldrh	r6, [r3, #0]
 8003482:	2f6f      	cmp	r7, #111	; 0x6f
 8003484:	bf0c      	ite	eq
 8003486:	2308      	moveq	r3, #8
 8003488:	230a      	movne	r3, #10
 800348a:	4851      	ldr	r0, [pc, #324]	; (80035d0 <_printf_i+0x23c>)
 800348c:	2100      	movs	r1, #0
 800348e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003492:	6865      	ldr	r5, [r4, #4]
 8003494:	2d00      	cmp	r5, #0
 8003496:	bfa8      	it	ge
 8003498:	6821      	ldrge	r1, [r4, #0]
 800349a:	60a5      	str	r5, [r4, #8]
 800349c:	bfa4      	itt	ge
 800349e:	f021 0104 	bicge.w	r1, r1, #4
 80034a2:	6021      	strge	r1, [r4, #0]
 80034a4:	b90e      	cbnz	r6, 80034aa <_printf_i+0x116>
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	d04b      	beq.n	8003542 <_printf_i+0x1ae>
 80034aa:	4615      	mov	r5, r2
 80034ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80034b0:	fb03 6711 	mls	r7, r3, r1, r6
 80034b4:	5dc7      	ldrb	r7, [r0, r7]
 80034b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034ba:	4637      	mov	r7, r6
 80034bc:	42bb      	cmp	r3, r7
 80034be:	460e      	mov	r6, r1
 80034c0:	d9f4      	bls.n	80034ac <_printf_i+0x118>
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d10b      	bne.n	80034de <_printf_i+0x14a>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	07de      	lsls	r6, r3, #31
 80034ca:	d508      	bpl.n	80034de <_printf_i+0x14a>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	6861      	ldr	r1, [r4, #4]
 80034d0:	4299      	cmp	r1, r3
 80034d2:	bfde      	ittt	le
 80034d4:	2330      	movle	r3, #48	; 0x30
 80034d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034de:	1b52      	subs	r2, r2, r5
 80034e0:	6122      	str	r2, [r4, #16]
 80034e2:	464b      	mov	r3, r9
 80034e4:	4621      	mov	r1, r4
 80034e6:	4640      	mov	r0, r8
 80034e8:	f8cd a000 	str.w	sl, [sp]
 80034ec:	aa03      	add	r2, sp, #12
 80034ee:	f7ff fedf 	bl	80032b0 <_printf_common>
 80034f2:	3001      	adds	r0, #1
 80034f4:	d14a      	bne.n	800358c <_printf_i+0x1f8>
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	b004      	add	sp, #16
 80034fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	f043 0320 	orr.w	r3, r3, #32
 8003506:	6023      	str	r3, [r4, #0]
 8003508:	2778      	movs	r7, #120	; 0x78
 800350a:	4832      	ldr	r0, [pc, #200]	; (80035d4 <_printf_i+0x240>)
 800350c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	6829      	ldr	r1, [r5, #0]
 8003514:	061f      	lsls	r7, r3, #24
 8003516:	f851 6b04 	ldr.w	r6, [r1], #4
 800351a:	d402      	bmi.n	8003522 <_printf_i+0x18e>
 800351c:	065f      	lsls	r7, r3, #25
 800351e:	bf48      	it	mi
 8003520:	b2b6      	uxthmi	r6, r6
 8003522:	07df      	lsls	r7, r3, #31
 8003524:	bf48      	it	mi
 8003526:	f043 0320 	orrmi.w	r3, r3, #32
 800352a:	6029      	str	r1, [r5, #0]
 800352c:	bf48      	it	mi
 800352e:	6023      	strmi	r3, [r4, #0]
 8003530:	b91e      	cbnz	r6, 800353a <_printf_i+0x1a6>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	f023 0320 	bic.w	r3, r3, #32
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	2310      	movs	r3, #16
 800353c:	e7a6      	b.n	800348c <_printf_i+0xf8>
 800353e:	4824      	ldr	r0, [pc, #144]	; (80035d0 <_printf_i+0x23c>)
 8003540:	e7e4      	b.n	800350c <_printf_i+0x178>
 8003542:	4615      	mov	r5, r2
 8003544:	e7bd      	b.n	80034c2 <_printf_i+0x12e>
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	6826      	ldr	r6, [r4, #0]
 800354a:	1d18      	adds	r0, r3, #4
 800354c:	6961      	ldr	r1, [r4, #20]
 800354e:	6028      	str	r0, [r5, #0]
 8003550:	0635      	lsls	r5, r6, #24
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	d501      	bpl.n	800355a <_printf_i+0x1c6>
 8003556:	6019      	str	r1, [r3, #0]
 8003558:	e002      	b.n	8003560 <_printf_i+0x1cc>
 800355a:	0670      	lsls	r0, r6, #25
 800355c:	d5fb      	bpl.n	8003556 <_printf_i+0x1c2>
 800355e:	8019      	strh	r1, [r3, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	4615      	mov	r5, r2
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	e7bc      	b.n	80034e2 <_printf_i+0x14e>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	2100      	movs	r1, #0
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	602a      	str	r2, [r5, #0]
 8003570:	681d      	ldr	r5, [r3, #0]
 8003572:	6862      	ldr	r2, [r4, #4]
 8003574:	4628      	mov	r0, r5
 8003576:	f000 f859 	bl	800362c <memchr>
 800357a:	b108      	cbz	r0, 8003580 <_printf_i+0x1ec>
 800357c:	1b40      	subs	r0, r0, r5
 800357e:	6060      	str	r0, [r4, #4]
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	6123      	str	r3, [r4, #16]
 8003584:	2300      	movs	r3, #0
 8003586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800358a:	e7aa      	b.n	80034e2 <_printf_i+0x14e>
 800358c:	462a      	mov	r2, r5
 800358e:	4649      	mov	r1, r9
 8003590:	4640      	mov	r0, r8
 8003592:	6923      	ldr	r3, [r4, #16]
 8003594:	47d0      	blx	sl
 8003596:	3001      	adds	r0, #1
 8003598:	d0ad      	beq.n	80034f6 <_printf_i+0x162>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	079b      	lsls	r3, r3, #30
 800359e:	d413      	bmi.n	80035c8 <_printf_i+0x234>
 80035a0:	68e0      	ldr	r0, [r4, #12]
 80035a2:	9b03      	ldr	r3, [sp, #12]
 80035a4:	4298      	cmp	r0, r3
 80035a6:	bfb8      	it	lt
 80035a8:	4618      	movlt	r0, r3
 80035aa:	e7a6      	b.n	80034fa <_printf_i+0x166>
 80035ac:	2301      	movs	r3, #1
 80035ae:	4632      	mov	r2, r6
 80035b0:	4649      	mov	r1, r9
 80035b2:	4640      	mov	r0, r8
 80035b4:	47d0      	blx	sl
 80035b6:	3001      	adds	r0, #1
 80035b8:	d09d      	beq.n	80034f6 <_printf_i+0x162>
 80035ba:	3501      	adds	r5, #1
 80035bc:	68e3      	ldr	r3, [r4, #12]
 80035be:	9903      	ldr	r1, [sp, #12]
 80035c0:	1a5b      	subs	r3, r3, r1
 80035c2:	42ab      	cmp	r3, r5
 80035c4:	dcf2      	bgt.n	80035ac <_printf_i+0x218>
 80035c6:	e7eb      	b.n	80035a0 <_printf_i+0x20c>
 80035c8:	2500      	movs	r5, #0
 80035ca:	f104 0619 	add.w	r6, r4, #25
 80035ce:	e7f5      	b.n	80035bc <_printf_i+0x228>
 80035d0:	0800373b 	.word	0x0800373b
 80035d4:	0800374c 	.word	0x0800374c

080035d8 <memmove>:
 80035d8:	4288      	cmp	r0, r1
 80035da:	b510      	push	{r4, lr}
 80035dc:	eb01 0402 	add.w	r4, r1, r2
 80035e0:	d902      	bls.n	80035e8 <memmove+0x10>
 80035e2:	4284      	cmp	r4, r0
 80035e4:	4623      	mov	r3, r4
 80035e6:	d807      	bhi.n	80035f8 <memmove+0x20>
 80035e8:	1e43      	subs	r3, r0, #1
 80035ea:	42a1      	cmp	r1, r4
 80035ec:	d008      	beq.n	8003600 <memmove+0x28>
 80035ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035f6:	e7f8      	b.n	80035ea <memmove+0x12>
 80035f8:	4601      	mov	r1, r0
 80035fa:	4402      	add	r2, r0
 80035fc:	428a      	cmp	r2, r1
 80035fe:	d100      	bne.n	8003602 <memmove+0x2a>
 8003600:	bd10      	pop	{r4, pc}
 8003602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800360a:	e7f7      	b.n	80035fc <memmove+0x24>

0800360c <_sbrk_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	2300      	movs	r3, #0
 8003610:	4d05      	ldr	r5, [pc, #20]	; (8003628 <_sbrk_r+0x1c>)
 8003612:	4604      	mov	r4, r0
 8003614:	4608      	mov	r0, r1
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	f7fd fcb8 	bl	8000f8c <_sbrk>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_sbrk_r+0x1a>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_sbrk_r+0x1a>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	20000258 	.word	0x20000258

0800362c <memchr>:
 800362c:	4603      	mov	r3, r0
 800362e:	b510      	push	{r4, lr}
 8003630:	b2c9      	uxtb	r1, r1
 8003632:	4402      	add	r2, r0
 8003634:	4293      	cmp	r3, r2
 8003636:	4618      	mov	r0, r3
 8003638:	d101      	bne.n	800363e <memchr+0x12>
 800363a:	2000      	movs	r0, #0
 800363c:	e003      	b.n	8003646 <memchr+0x1a>
 800363e:	7804      	ldrb	r4, [r0, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	428c      	cmp	r4, r1
 8003644:	d1f6      	bne.n	8003634 <memchr+0x8>
 8003646:	bd10      	pop	{r4, pc}

08003648 <memcpy>:
 8003648:	440a      	add	r2, r1
 800364a:	4291      	cmp	r1, r2
 800364c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003650:	d100      	bne.n	8003654 <memcpy+0xc>
 8003652:	4770      	bx	lr
 8003654:	b510      	push	{r4, lr}
 8003656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800365a:	4291      	cmp	r1, r2
 800365c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003660:	d1f9      	bne.n	8003656 <memcpy+0xe>
 8003662:	bd10      	pop	{r4, pc}

08003664 <_realloc_r>:
 8003664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003668:	4680      	mov	r8, r0
 800366a:	4614      	mov	r4, r2
 800366c:	460e      	mov	r6, r1
 800366e:	b921      	cbnz	r1, 800367a <_realloc_r+0x16>
 8003670:	4611      	mov	r1, r2
 8003672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003676:	f7ff bc37 	b.w	8002ee8 <_malloc_r>
 800367a:	b92a      	cbnz	r2, 8003688 <_realloc_r+0x24>
 800367c:	f7ff fbcc 	bl	8002e18 <_free_r>
 8003680:	4625      	mov	r5, r4
 8003682:	4628      	mov	r0, r5
 8003684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003688:	f000 f81b 	bl	80036c2 <_malloc_usable_size_r>
 800368c:	4284      	cmp	r4, r0
 800368e:	4607      	mov	r7, r0
 8003690:	d802      	bhi.n	8003698 <_realloc_r+0x34>
 8003692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003696:	d812      	bhi.n	80036be <_realloc_r+0x5a>
 8003698:	4621      	mov	r1, r4
 800369a:	4640      	mov	r0, r8
 800369c:	f7ff fc24 	bl	8002ee8 <_malloc_r>
 80036a0:	4605      	mov	r5, r0
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d0ed      	beq.n	8003682 <_realloc_r+0x1e>
 80036a6:	42bc      	cmp	r4, r7
 80036a8:	4622      	mov	r2, r4
 80036aa:	4631      	mov	r1, r6
 80036ac:	bf28      	it	cs
 80036ae:	463a      	movcs	r2, r7
 80036b0:	f7ff ffca 	bl	8003648 <memcpy>
 80036b4:	4631      	mov	r1, r6
 80036b6:	4640      	mov	r0, r8
 80036b8:	f7ff fbae 	bl	8002e18 <_free_r>
 80036bc:	e7e1      	b.n	8003682 <_realloc_r+0x1e>
 80036be:	4635      	mov	r5, r6
 80036c0:	e7df      	b.n	8003682 <_realloc_r+0x1e>

080036c2 <_malloc_usable_size_r>:
 80036c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c6:	1f18      	subs	r0, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bfbc      	itt	lt
 80036cc:	580b      	ldrlt	r3, [r1, r0]
 80036ce:	18c0      	addlt	r0, r0, r3
 80036d0:	4770      	bx	lr
	...

080036d4 <_init>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr

080036e0 <_fini>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr
